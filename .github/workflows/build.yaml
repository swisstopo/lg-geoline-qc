name: Build QGIS Plugin
'on':
  workflow_call:
  push:
  pull_request:
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Get source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: pip
          cache-dependency-path: requirements/packaging.txt
      - name: Install Python requirements
        run: pip install -r requirements/packaging.txt
      - name: Debug GitHub Context
        run: |
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_REF_NAME: $GITHUB_REF_NAME"
          echo "GITHUB_EVENT_NAME: $GITHUB_EVENT_NAME"
          echo "GITHUB_SHA: $GITHUB_SHA"
          echo "GITHUB_RUN_ID: $GITHUB_RUN_ID"
          echo "GITHUB_WORKFLOW: $GITHUB_WORKFLOW"
          echo "GITHUB_ACTOR: $GITHUB_ACTOR"
          echo "GITHUB_REPOSITORY: $GITHUB_REPOSITORY"
          echo "GITHUB_HEAD_REF: $GITHUB_HEAD_REF"
          echo "GITHUB_BASE_REF: $GITHUB_BASE_REF"
          echo "TAG: $(git describe --tags --abbrev=0 || echo 'No tag found')"
      - name: Set plugin version environment variables
        run: >
          TAG=$(git describe --tags $(git rev-list --tags --max-count=1))

          echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Get Version from Tag
        id: version
        run: |
            echo "VERSION=$(git describe --tags --abbrev=0)" >> $GITHUB_ENV
            echo "Extracted version: ${{ env.VERSION }}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update metadata.txt
        run: |
          python update_version.py "GeoLinesQC/metadata.txt" "${{ env.VERSION }}"

      - name: Commit updated metadata.txt
        run: |
              git config --global user.name "GitHub Actions"
              git config --global user.email "actions@github.com"
              # git add GeoLinesQC/metadata.txt
              # git commit -m "Update version to ${{ env.VERSION }}"
              # git push


      - name: Build QGIS Plugin
        run: |
          zip -r GeoLinesQC.zip GeoLinesQC/
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: GeoLinesQC
          path: GeoLinesQC.zip
      - name: Rename Artifact with Version
        run: mv GeoLinesQC.zip GeoLinesQC-${{ env.VERSION }}.zip

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: GeoLinesQC-${{ env.VERSION }}  # New name!
          path: GeoLinesQC-${{ env.VERSION }}.zip
      # - name: Extract version from tag
      #  if: 'startsWith(github.ref, ''refs/tags/'') && github.ref_name == ''master'''
      #  run: 'echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV'
      #- name: Build package
      #  run: |
      #    qgis-plugin-ci --no-validation package ${{ env.VERSION }}
      #    mkdir tmp
      #    unzip GeoLinesQC.${{ env.VERSION }}.zip -d tmp
      #- uses: actions/upload-artifact@v4
      #  with:
      #    name: GeoLinesQC.zip
      #    path: 'GeoLinesQC.${{ env.VERSION }}.zip'
